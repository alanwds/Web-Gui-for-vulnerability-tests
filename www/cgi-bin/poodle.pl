#!/usr/bin/perl
# sslv3_scanner.pl
# Version 1.0

# Copyright 2014 Charles R. Hill <hill.charles.robert@gmail.com> 

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#Script para testar
#O script recebe como parametro um IP de um servidor com SSL para testar se esta vulneravel a poodle. O script retorna 0 para servidor OK, 1 para servidor vulneravel ou 2 para algum erro + mensagem de erro
#Customizacoes: alan.santos@rnp.br


use strict;
use warnings;

# make unbuffered for timely output to screen
select STDOUT; $| = 1;  

# command line options
my $protocols   = ['ssl3']; #
our $protocol   = 'ssl3'; #
my $openssl     = 'openssl';
my $host        = '';
my $timeout     = '2';

sub test_hosts {

    my ($hosts) = @_;
    
            my $test_result = -1;
            my $test_command_result;
            
            my $test_command = 'echo "" | ' . $openssl . ' s_client -' . $protocol . ' -connect ' . $host . ':443 2>&1';
            #warn "Test command = $test_command \n";
            
            eval {
                local $SIG{ALRM} = sub { die "alarm\n" }; # NB: \n required
		alarm(3);

                $test_command_result = `$test_command`;
                #warn "Test command result = $test_command_result \n" if DEBUG;
            
                alarm 0;
            };
            
            if ($@) {
                die unless $@ eq "alarm\n";   # propagate unexpected errors
                $test_command_result = '';
                print "2&unknown, timeout.";
		exit 0;
            }

            if ($test_command_result =~ /CONNECTED/) {
                if ($test_command_result =~ /ssl handshake failure/) {
                    $test_result = 0;
                    print "0";
                } else {
                    $test_result = 1;
                    #print "supported. \n";
		    print "1";
                }
            } else{

			print "2";
			exit 0;
		}
}

if (!$ARGV[0]){

print "ERRO: Modo de usar:
        \n ./poodle [IP]
        \n[IP] - Endereco do servidor a ser testado\n";
        exit 0;
}else{

        $host = $ARGV[0];

        #Chama a funcao test_host, passando como parametro o IP recebido pelo script
        test_hosts($host);

}
